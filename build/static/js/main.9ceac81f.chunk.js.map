{"version":3,"sources":["services/personsService.js","components/Notification .js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","classNotif","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","search","setSearch","typeOfClass","notification","setNotification","useEffect","personsService","dispatchNotification","newNotification","setTimeout","numbersToShow","filter","person","str1","name","RegExp","test","toString","value","onChange","event","target","style","marginTop","onClick","preventDefault","number","some","item","window","confirm","map","concat","catch","error","console","log","p","deleteNote","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ceac81f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data);\r\n}\r\n\r\nexport default { getAll, create, update, deletePerson }","import React from 'react'\r\n\r\nfunction Notification ({message, className}) {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  const classNotif = `notification ${className}`\r\n\r\n  return (\r\n    <div className={classNotif}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React, { useState, useEffect } from 'react'\nimport personsService from'./services/personsService';\nimport Notification from './components/Notification ';\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ search, setSearch ] = useState('');\n  const [notification, setNotification] = useState({\n    message: null,\n    typeOfClass: ''\n  })\n\n  useEffect(()=>{\n    personsService\n      .getAll()\n      .then(persons => {\n        setPersons(persons);\n      })\n  },[])\n\n  const dispatchNotification = (newNotification) => {\n    setNotification(newNotification)\n    setTimeout(() => {\n      setNotification({message: null, typeOfClass: ''})\n    }, 5000)\n  }\n\n  const addPerson =(event) => {\n    event.preventDefault();\n\n    const newObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    // если такое имя уже есть всписке\n    const isContains = persons.some(item => {\n      if (item.name === newName) {\n        // предлагаем заменить ранее записаную запись\n        const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n\n        if (result) {\n          personsService\n              .update(item.id, newObject)\n              .then(data => {\n                // обновляем список только в нужном нам месте\n                setPersons(persons.map(person => person.id !== item.id ? person : data))\n                dispatchNotification({\n                    message : `${newName} updated`,\n                    typeOfClass : 'info'\n                })\n              })\n        }\n        return true\n      } else {\n        return false\n      }\n    });\n\n    // если такое имени нет создаем новое\n    if(!isContains) {\n      personsService.create(newObject).then(person=> {\n        setPersons(persons.concat(person));\n        setNewName('');\n        setNewNumber('');\n        dispatchNotification({\n          message : `Added ${person.name}`,\n          typeOfClass : 'info'\n        })\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        dispatchNotification({\n          // message: JSON.stringify(error.response.data),\n          message: `${newName} not added`,\n          typeOfClass: 'error'\n        })\n      })\n    }\n}\n\n  const deleteNote = ({name, id}) => {\n    const result = window.confirm(`Delete ${name} ?`);\n    if (result) {\n      personsService\n        .deletePerson(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id))\n          dispatchNotification({\n            message : `${name} was removed`,\n            typeOfClass : 'info'\n          })\n        })\n        .catch(error => {\n          console.log(error);\n          dispatchNotification({\n            message: `Information of ${name} has already been removed from server`,\n            typeOfClass: 'error'\n          })\n          setPersons(persons.filter(p => p.id !== id))\n        })\n\n    } else {\n      return null\n    }\n  }\n\n  const toCompare = (str1, str2) => {\n    const regExp = new RegExp(str2, 'gi')\n    return regExp.test(str1.toString())\n  }\n\n  const numbersToShow = search\n  ? persons.filter(person => toCompare(person.name, search))\n  : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification.message} className={notification.typeOfClass}/>\n      <div>\n        filter shown with:&nbsp;\n        <input\n          value={search}\n          onChange={(event) => setSearch(event.target.value)}\n        />\n      </div>\n      <h2>Add a new numbers</h2>\n      <form>\n        <div>\n          name:&nbsp;\n          <input\n            value={newName}\n            onChange={(event) => setNewName(event.target.value)}\n          />\n        </div>\n        <div style={{marginTop: '10px'}}>\n          number:&nbsp;\n          <input\n          value={newNumber}\n          onChange={(event) => setNewNumber(event.target.value)}\n          />\n        </div>\n        <div>\n          <button onClick={addPerson}>add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <ul>\n        {numbersToShow.map(person => {\n          return (\n            <div key={person.name}>\n              <li  >{person.name}:{person.number}</li>\n              <button onClick={() => deleteNote(person)}>delete</button>\n            </div>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}